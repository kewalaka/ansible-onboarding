---
# This playbook

- name: Create folder hierachy
  win_file:
    path: "{{ item }}"
    state: directory  
  loop:
    - 'C:\Admin\'
    - 'C:\Installs\'
    - 'C:\Services\'
    - 'C:\Services(x86)\'

- name: Disable inheritence and remove inherited ACE's
  win_acl_inheritance:
    path: C:\Admin
    state: absent
    reorganize: no # yes - would copy the ACE

  # interesting thought here - this can't doesn't really provide compliance
  # nothing to stop someone adding extra ACEs
- name: Allow only built in admins & system 
  win_acl:
    path: C:\Admin
    user: "{{ item.user }}"
    rights: "{{ item.rights }}"
    type: allow # or deny
  loop:
    - { user: 'NT AUTHORITY\SYSTEM', rights: 'FullControl'}
    - { user: 'BUILTIN\Administrators', rights: 'FullControl'}

- name: Set performance plan to High
  win_power_plan:
      name: high performance

- name: Install PSGallery modules
  win_psmodule:
    name: "{{ item }}"
    url: '{{ nuget_repository_url }}'
    repository: 'LocalRepository'
    state: present
  loop:
    - ComputerManagementDsc

- name: Set PS Execution policy to remotesigned
  win_dsc:
      resource_name: PowerShellExecutionPolicy
      ExecutionPolicyScope: LocalMachine
      ExecutionPolicy: RemoteSigned

- name: Use win_dsc with PsDscRunAsCredential to run as a different user
  win_dsc:
    resource_name: Registry
    Ensure: Present
    Key: HKEY_CURRENT_USER\ExampleKey
    ValueName: TestValue
    ValueData: TestData
    # the two vars ansible_user and ansible_password correspond to the credentials
    # used by tower to run the playbook.
    PsDscRunAsCredential_username: '{{ ansible_user }}'
    PsDscRunAsCredential_password: '{{ ansible_password }}'
  # should usually set this - but want to see what credentials were used
  #no_log: yes

# example showing with_items
- name: apply ramsomeware patch disable smb v1
  win_regedit:
    path: '{{ item.path }}'
    name: '{{item.name}}'
    data: '{{ item.data}}'
    type: '{{ item.type }}'
    state: present
  with_items:
    - path: 'HKLM:\SYSTEM\CurrentControlSet\Services\LanmanServer\Parameters'
      name: 'SMB1'
      data: '0'
      type: 'dword'      
  register: apply_patch_ramsomeware

- name: Reboot if needed
  win_shell: Restart-Computer -Force
  when: apply_patch_ramsomeware.changed
  ignore_errors: yes